---
import { SITE_TITLE, SITE_DESCRIPTION, SITE_URL } from '../site.config';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
}

const { title, description, image, noindex } = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, SITE_URL);
const pageTitle = title ? `${title} | ${SITE_TITLE}` : SITE_TITLE;
const pageDescription = description || SITE_DESCRIPTION;
const socialImage = image || '/social-image.jpg';
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />

    {noindex && <meta name="robots" content="noindex, nofollow" />}

    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:image" content={new URL(socialImage, SITE_URL)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={pageTitle} />
    <meta property="twitter:description" content={pageDescription} />
    <meta property="twitter:image" content={new URL(socialImage, SITE_URL)} />

    <ViewTransitions />

    <style is:global>
      :root {
        --background: 255 255 255;
        --foreground: 13 13 13;
        --muted: 245 245 245;
        --muted-foreground: 115 115 115;
        --border: 229 229 229;
        --accent: 0 0 0;
        --accent-foreground: 255 255 255;
      }

      .dark {
        --background: 13 13 13;
        --foreground: 255 255 255;
        --muted: 23 23 23;
        --muted-foreground: 163 163 163;
        --border: 39 39 42;
        --accent: 255 255 255;
        --accent-foreground: 0 0 0;
      }

      html {
        font-family: system-ui, sans-serif;
        color-scheme: light dark;
      }

      body {
        background-color: rgb(var(--background));
        color: rgb(var(--foreground));
        line-height: 1.6;
        margin: 0;
        padding: 0;
        transition:
          background-color 0.2s ease,
          color 0.2s ease;
      }

      * {
        box-sizing: border-box;
      }

      a {
        color: rgb(var(--foreground));
        text-decoration: none;
        transition: opacity 0.2s ease;
      }

      a:hover {
        opacity: 0.7;
      }

      .prose {
        max-width: 65ch;
        margin: 0 auto;
      }

      .prose h1,
      .prose h2,
      .prose h3,
      .prose h4,
      .prose h5,
      .prose h6 {
        margin-top: 1.5em;
        margin-bottom: 0.5em;
        line-height: 1.2;
      }

      .prose p {
        margin-bottom: 1em;
      }

      .prose ul,
      .prose ol {
        margin-bottom: 1em;
        padding-left: 1.5em;
      }

      .prose pre {
        background-color: rgb(var(--muted));
        border-radius: 0.5rem;
        padding: 1rem;
        overflow-x: auto;
        margin-bottom: 1em;
      }

      .prose code {
        background-color: rgb(var(--muted));
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
        font-size: 0.875em;
      }

      .prose pre code {
        background-color: transparent;
        padding: 0;
      }

      .prose blockquote {
        border-left: 4px solid rgb(var(--border));
        margin-left: 0;
        margin-right: 0;
        padding-left: 1rem;
        font-style: italic;
        color: rgb(var(--muted-foreground));
      }

      .prose img {
        max-width: 100%;
        height: auto;
        border-radius: 0.5rem;
      }

      .prose hr {
        border: none;
        height: 1px;
        background-color: rgb(var(--border));
        margin: 2rem 0;
      }

      .prose table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      .prose th,
      .prose td {
        border: 1px solid rgb(var(--border));
        padding: 0.5rem;
        text-align: left;
      }

      .prose th {
        background-color: rgb(var(--muted));
        font-weight: 600;
      }
    </style>
  </head>
  <body>
    <slot />

    <script>
      // Dark mode toggle functionality
      const theme = (() => {
        if (
          typeof localStorage !== 'undefined' &&
          localStorage.getItem('theme')
        ) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();

      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }

      window.localStorage.setItem('theme', theme);
    </script>
  </body>
</html>

